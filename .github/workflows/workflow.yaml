on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]
jobs:
  main_job:
    continue-on-error: true
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{matrix.os}}
    steps:
    - uses: actions/checkout@v3.5.3
      with:
        submodules: true
    
    - if: matrix.os == 'windows-latest'
      uses: ilammy/msvc-dev-cmd@v1.12.1

     # install Qt
    - uses: jurplel/install-qt-action@v3.3.0
      with:
        version: "6.5.1"
        cache: true
    - if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
      run: Qt6_ROOT="${Qt6_DIR}"
    - if: matrix.os == 'windows-latest'
      run: $env:Qt6_ROOT="${env:Qt6_DIR}"

    # install winget
    - if: matrix.os == 'windows-latest'
      uses: Cyberboss/install-winget@v1

    # install nsis
    - if: matrix.os == 'windows-latest'
      run: winget install -e --id NSIS.NSIS --accept-source-agreements

    # install xcb-cursor
    - if: matrix.os == 'ubuntu-latest'
      run: sudo apt install libxcb-cursor-dev

    # install instruments
    - id: cache-instruments
      uses: actions/cache@v1.2.1
      with:
        path: share
        key: ${{matrix.os}}-instruments
    - if: steps.cache-instruments.outputs.cache-hit != 'true' && (matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest')
      run: curl https://ftp.osuosl.org/pub/musescore/soundfont/MuseScore_General/MuseScore_General.sf2 --output share/MuseScore_General.sf2
    - if: steps.cache-instruments.outputs.cache-hit != 'true' && matrix.os == 'windows-latest'
      run: Invoke-WebRequest -Uri "https://ftp.osuosl.org/pub/musescore/soundfont/MuseScore_General/MuseScore_General.sf2" -OutFile share/MuseScore_General.sf2

    # install vcpkg
    - run: git clone --branch "Csound" "https://github.com/bramtayl/vcpkg.git"
    - if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
      run: ./vcpkg/bootstrap-vcpkg.sh
    - if: matrix.os == 'windows-latest'
      run: ./vcpkg/bootstrap-vcpkg.bat

    # build
    - run: mkdir build
    - run: cmake --preset "Release"
    - run: cmake --build --preset "Release"

    # set up coverage
    # just get coverage for ubuntu release
    - if: matrix.os == 'ubuntu-latest'
      name: "lcov setup"
      run: |
        sudo apt install lcov
        mkdir "coverage"
        # need an empty baseline
        lcov --capture --initial --include "${{github.workspace}}/src/*" --directory "debug" --output-file "coverage/empty-lcov.info"

    # test
    - run: ctest --preset "Release"

    # coverage
    - if: matrix.os == 'ubuntu-latest' && matrix.build_type == 'Release'
      name: "run lcov"
      run: |
        lcov --capture --include "${{github.workspace}}/src/*" --directory "debug" --output-file "coverage/coverage-lcov.info"
        # combine with the empty baseline
        lcov --add-tracefile "coverage/empty-lcov.info" --add-tracefile "coverage/coverage-lcov.info" --output-file "coverage/lcov.info"
    - if: matrix.os == 'ubuntu-latest' && matrix.build_type == 'Release'
      uses: codecov/codecov-action@v3
      with:
        files: "coverage/lcov.info"
        verbose: true
        token: "${{secrets.CODECOV_TOKEN}}"

    # package
    - run: cpack --preset "Release"
    
    - if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v0.1.15
      with:
        files:
          # e.g. Justly-0.1.0-win64.exe
          build/Justly-*-*.exe
          build/Justly-*-*.tar.gz



